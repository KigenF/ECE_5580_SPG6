import "transpose_matrix.cry";
include "helpers.saw";


/* let transposeMatrix_spec : LLVMSetup () = do {
    result <- llvm_alloc (llvm_array 100 (llvm_int 16));
    init <- llvm_fresh_var "init" (llvm_array 100 (llvm_int 16));
    llvm_points_to result (llvm_term {{ init : [100][16] }});

    arr <- llvm_alloc (llvm_array 100 (llvm_int 16));
    input <- llvm_fresh_var "input" (llvm_array 100 (llvm_int 16));
    llvm_points_to arr (llvm_term {{ input : [100][16] }});

    llvm_execute_func [
      result,
      arr,
      llvm_term {{ 10 : [64] }},
      llvm_term {{ 10 : [64] }},
      llvm_term {{ 1 : [64] }}
    ];

    llvm_points_to result (llvm_term
      {{ flatten (transpose_matrix (unflatten input)) : [100][16] }}
    );

    return ();
}; */




//SAWscript following the given code format

let transposeMatrix_spec = do {

    (init, result) <- ptr_to_fresh "init" (llvm_array 4158 (llvm_int 16));
    (input, arr) <- ptr_to_fresh "input" (llvm_array 4158 (llvm_int 16));

    llvm_execute_func [
      result,
      arr,
      llvm_term {{ 594 : [64] }},
      llvm_term {{ 7 : [64] }}
    ];

    let result_spec = {{ flatten (transpose_matrix (unflatten input)) : [4158][16] }};
    llvm_points_to result (llvm_term {{result_spec}});

    return ();
};

m <- llvm_load_module "transpose_matrix.bc";
llvm_verify m "transpose_matrix" [] false transposeMatrix_spec abc;