module r5_cpa_kem_keygen where

// Parameters for R5N1_1CPA_0d
p = 1024 : Integer // Message modulus (2^10). p_bits = 10.
tau = 2 : Integer // Index in f^tau_{d,n}, one of factors determining the DRGB scheme.

type d = 594 //// Number of polynomial coefficients per public matrix row.
type n = 1  // Degree of reduction polynomial. n = 1 means non-ring
type q = 8192 // Modulus (2^13). q_bits = 13.
type n_bar = 7 // Number of columns of the secret matrix to compute B.
type m_bar = 7
type q_bits = [13]
type p_val = 10
type p_bits = [10]
type byte = [8]
type hex = [16]
type sigma_byte = [16]byte
type pk_byte = [5214]byte // Public key's size = 5214 byes.
type pk_bits = [5214 * 8]
type sk_byte = [16]byte //Secret key's size = 16 bytes.
type Tq = (Z q)
type h = 238
type kappa = 16


r5_cpa_kem_keygen : sigma_byte -> sk_byte -> (pk_byte, sk_byte)
r5_cpa_kem_keygen sigma _sk = (pk, sk)
    where
        (pk, sk) = r5_cpa_pke_keygen sigma _sk

r5_cpa_pke_keygen : sigma_byte -> sk_byte -> (pk_byte, sk_byte)
r5_cpa_pke_keygen sigma _sk = (pk, sk)
    where
        A = create_A sigma
        S_T = create_S_T _sk
        S = transpose_matrix S_T
        B = dotMatMat A S
        B_b = round_matrix B
        pk = pack_pk sigma B_b
        sk = _sk

/*Testing functions*/
// show_sigma sigma = sigma
// foreign create_A_master : sigma_byte -> [2048 + d]hex

foreign create_A : sigma_byte -> [d/n][d/n]q_bits
foreign create_S_T : sk_byte -> [n_bar][d]q_bits

transpose_matrix : {row, col} (fin row, fin col, row >= 1, col >= 1) => [row][col]q_bits -> [col][row]q_bits
transpose_matrix A = [[A @ j @ i | j <- [0 .. row - 1]] | i <- [0 .. col - 1]]

round_matrix :
    [d][n_bar]q_bits -> [d][n_bar]p_bits
round_matrix A = [[round_element (elm) | elm <- row] | row <- A]

round_element x = drop`{3}((x + 4) >> 3)

dotVecVec : [d/n]q_bits -> [d/n]q_bits -> q_bits
dotVecVec v1 v2 = (sum (zipWith (*) v1 v2) && (8191))

dotMatVec : [d/n][d/n]q_bits -> [d]q_bits -> [d/n]q_bits
dotMatVec matrix vector = [dotVecVec v1 vector | v1 <- matrix]

dotMatMat : /*{k1,k2,k3} (fin k1, fin k2, fin k3) =>*/
    [d/n][d/n]q_bits -> [d][n_bar]q_bits -> [d][n_bar]q_bits
dotMatMat matrix1 matrix2 = transpose [dotMatVec matrix1 vector | vector <- m']
    where m' = transpose matrix2

// Logic of packing the public key:
// Compose a 5214-byte result from a 584 * 7 * 10 bit array.
// The way four 10-bits sequences is like: 
// Input: 0b0010110010 0b0001101001 0b0101100100 0b1010111101
// byte 1: 0b10110010 (the first 8 bits)
// byte 2: 0b10100100 (the last 2 bits of the first input and the first 6 bits of the second)
// byte 3: 0b01000001 (the last 4 bits of the second input and the first 4 bits of the third)
// byte 4: 0b01010110 (the last 6 bits of the third and the first 2 bits of the fourth)
// byte 5: 0b10101111 (the last 8 bits of the fourth)
// If there is an input has a length lesser than 8 bits, e.g., 0b0011, the result will be: 
// 0b00000011, padding zeros to its most significant bits.
pack_pk : sigma_byte -> [d][n_bar]p_bits -> pk_byte
pack_pk sigma B_b = pk
    where
        joined_B_b = join B_b
        front_B_b = take`{1039 * 4} joined_B_b
        rear_B_b = drop`{1039 * 4} joined_B_b
        padded_rear = pad_rear rear_B_b
        grouped_B_b = groupBy`{4} front_B_b
        pk = sigma # join [myPack g | g <- grouped_B_b] # padded_rear

myPack : [4]p_bits -> [5]byte
myPack B = result
    where
        first_B = take`{8} (B @ 0 << 2)
        second_B = drop`{4} (B @ 1) # take`{2} (B @ 0)
        third_B = drop`{6} (B @ 2) # take`{4} (B @ 1)
        fourth_B = drop`{8} (B @ 3) # take`{6} (B @ 2)
        fifth_B = take`{8} (B @ 3)
        result = [first_B, second_B, third_B, fourth_B, fifth_B]

pad_rear : [2]p_bits -> [3]byte
pad_rear rear_B_b = padded_rear
    where
        first_B = take`{8} (rear_B_b @ 0 << 2)
        second_B = drop`{4} (rear_B_b @ 1) # take`{2} (rear_B_b @ 0)
        third_B = [0,0,0,0] # take`{4} (rear_B_b @ 1)
        padded_rear = [first_B, second_B, third_B]
