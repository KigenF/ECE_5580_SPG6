module r5_cpa_kem_decrypt where

// Parameters for R5N1_1CPA_0d
type d = 594 //// Number of polynomial coefficients per public matrix row.
type n = 1  // Degree of reduction polynomial. n = 1 means non-ring
type q = 8192 // Modulus (2^13). q_bits = 13.
type n_bar = 7 // Number of columns of the secret matrix to compute B.
type q_bits = 13
type p_bits = 10
type byte = [8]
type hex = [16]
type sigma_byte = [16]byte
type pk_byte = [5214]byte // Public key's size = 5214 byes.
type sk_byte = [16]byte //Secret key's size = 16 bytes.
type Tq = (Z q)
type h = 238
type cipher_byte = [5236]byte
type cipher_len = 5236
type kappa_bits = 16
type m_bar = 1
type xe = 0
type b_bits = 3
type mu = 43

r5_cpa_kem_decrypt : sk_byte -> cipher_byte -> [kappa]byte
r5_cpa_kem_decrypt sk ct = k_string
    where
        msg = r5_cpa_pke_decrypt sk ct
        k_string = hash m ct ceiling((m_bar * (d/n) * n * p_bits + mu * t_bits)/8)

r5_cpa_pke_decrypt : sk_byte -> cipher_byte -> [kappa]byte
r5_cpa_pke_decrypt sk ct = msg
    where
        S_T = create_S_T(sk)
        (U_T, v) = unpack_ct ct
        U = transpose_matrix U_T
        v_d = decompress_matrix v
        X_prime = dotMatMat S_T U
        m2 = diff_msg v X_prime
        m2_d = round_matrix m2
        m1 = pack m2_d


/*Testing functions*/
// show_sigma sigma = sigma
// foreign create_A_master : sigma_byte -> [2048 + d]hex

foreign create_A : sigma_byte -> [d/n][d/n][q_bits]
foreign create_S_T : sk_byte -> [n_bar][d][q_bits]
foreign pack_pk : sigma_byte -> [d][n_bar][p_bits] -> pk_byte
foreign unpack_ct : cipher_byte -> [d/n * m_bar][p_bits] -> [mu][b_bits]
foreign decompress_matrix : [mu][b_bits] -> [mu][p_bits]
foreign diff_msg : [mu][p_bits] -> [n_bar][m_bar][p_bits] -> [mu][p_bits]
foreign pack : [mu][b_bits] -> [kappa]byte
foreign hash : [kappa + cipher_len]byte -> [kappa]byte

transpose_matrix : {row, col} (fin row, fin col, row >= 1, col >= 1) => [row][col][q_bits] -> [col][row][q_bits]
transpose_matrix A = [[A @ j @ i | j <- [0 .. row - 1]] | i <- [0 .. col - 1]]

round_matrix :
    [d][n_bar][q_bits] -> [d][n_bar][p_bits]
round_matrix A = [[round_element (elm) | elm <- row] | row <- A]

round_element x = drop`{3}((x + 4) >> 3)

dotVecVec : [d/n][q_bits] -> [d/n][q_bits] -> [q_bits]
dotVecVec v1 v2 = (sum (zipWith (*) v1 v2) && (8191))

dotMatVec : [d/n][d/n][q_bits] -> [d][q_bits] -> [d/n][q_bits]
dotMatVec matrix vector = [dotVecVec v1 vector | v1 <- matrix]

dotMatMat : /*{k1,k2,k3} (fin k1, fin k2, fin k3) =>*/
    [d/n][d/n][q_bits] -> [d][n_bar][q_bits] -> [d][n_bar][q_bits]
dotMatMat matrix1 matrix2 = transpose [dotMatVec matrix1 vector | vector <- m']
    where m' = transpose matrix2

/*pack_pk : sigma_byte -> [d][n_bar][p_bits] -> pk_byte
pack_pk sigma B = (sigma # split (join (join (map (map reverse) B))))*/
